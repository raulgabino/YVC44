// Soluci√≥n mejorada para app/api/search/route.ts
// Sistema de perfiles de vibe con contexto espec√≠fico y validaciones estrictas
import { type NextRequest, NextResponse } from "next/server"
import type { Place } from "@/types/place"

export async function POST(request: NextRequest) {
  try {
    const { vibe, city } = await request.json()
    console.log("üîç GPT Expanded search request:", { vibe, city })

    if (!vibe || !city) {
      return NextResponse.json([])
    }

    if (!process.env.OPENAI_API_KEY) {
      console.log("‚ö†Ô∏è OPENAI_API_KEY not configured")
      return NextResponse.json([])
    }

    // Determinar si la ciudad es mexicana o internacional
    const isMexicanCity = await checkIfMexicanCity(city)

    console.log("üá≤üáΩ City analysis:", { city, isMexicanCity })

    // Sistema de perfiles de vibe con contexto espec√≠fico
    const vibeProfiles: Record<
      string,
      {
        description: string
        context: string
        avoid: string
        examples: string
      }
    > = {
      Traka: {
        description: "fiesta, diversi√≥n, vida nocturna, m√∫sica en vivo, antros",
        context: "lugares para revent√≥n, ambiente de club, m√∫sica alta",
        avoid: "lugares familiares, formales, tranquilos",
        examples: "antros, bares con m√∫sica, terrazas de fiesta",
      },
      Bellakeo: {
        description: "ambiente seductor, sensual, para ligar, cocktails sofisticados",
        context: "lugares √≠ntimos pero con ambiente sensual, no familiar",
        avoid: "lugares familiares, casuales, muy formales",
        examples: "bares de cocktails, terrazas con ambiente, lounges",
      },
      Tranqui: {
        description: "relajado, sin presi√≥n, chill, ambiente zen, terrazas",
        context: "lugares para descansar, conversar tranquilo, sin prisa",
        avoid: "lugares muy formales, de fiesta, ruidosos",
        examples: "caf√©s con terraza, parques, lugares chill",
      },
      God√≠nez: {
        description: "profesional, formal, ejecutivo, wifi, cerca de oficinas",
        context: "lugares para reuniones de trabajo, despu√©s de oficina",
        avoid: "lugares muy casuales, de fiesta, familiares",
        examples: "restaurantes ejecutivos, caf√©s con wifi, lugares formales",
      },
      Dominguero: {
        description: "familiar, casual, para fines de semana, brunch, ni√±os",
        context: "lugares para familias, ambiente hogare√±o, relajado",
        avoid: "lugares de fiesta, muy formales, nocturnos",
        examples: "restaurantes familiares, parques, lugares de brunch",
      },
      Chambeador: {
        description: "para trabajar, estudiar, wifi confiable, silencioso",
        context: "lugares productivos, con mesas amplias, enchufes",
        avoid: "lugares ruidosos, de fiesta, sin wifi",
        examples: "caf√©s para laptop, bibliotecas, coworking",
      },
      T√≥xico: {
        description: "intenso, dram√°tico, para procesar emociones, mezcal",
        context: "lugares para desahogarse, ambiente introspectivo",
        avoid: "lugares muy alegres, familiares, formales",
        examples: "bares oscuros, cantinas, lugares con mezcal",
      },
      Dateo: {
        description: "rom√°ntico, para citas, √≠ntimo, elegante, velas",
        context: "lugares para parejas, ambiente rom√°ntico pero no familiar",
        avoid: "lugares muy casuales, ruidosos, familiares",
        examples: "restaurantes rom√°nticos, caf√©s √≠ntimos, terrazas con vista",
      },
      Crudo: {
        description: "lugares CASUALES para resaca, fondas populares, tacos, caldos",
        context: "lugares SIN PRETENSIONES, baratos, tradicionales, comfort food",
        avoid: "lugares trendy, caros, instagrameables, upscale como Rosetta",
        examples: "taquer√≠as de barrio, fondas familiares, jugos Betty, comedores populares",
      },
      Barb√≥n: {
        description: "sofisticado, elegante, exclusivo, premium, vinos",
        context: "lugares caros, con clase, para impresionar",
        avoid: "lugares casuales, baratos, populares",
        examples: "restaurantes premium, wine bars, lugares exclusivos",
      },
      Instagrameable: {
        description: "trendy, fotog√©nico, viral, aesthetic, para fotos",
        context: "lugares modernos, con dise√±o llamativo, populares en redes",
        avoid: "lugares muy tradicionales, sin dise√±o especial",
        examples: "caf√©s aesthetic, restaurantes con dise√±o, lugares trendy",
      },
    }

    const vibeProfile = vibeProfiles[vibe]
    if (!vibeProfile) {
      return NextResponse.json(getFallbackResults(city, vibe))
    }

    // Prompt adaptado seg√∫n si es M√©xico o internacional
    const searchPrompt = isMexicanCity
      ? buildMexicanCityPrompt(city, vibe, vibeProfile)
      : buildInternationalCityPrompt(city, vibe, vibeProfile.description)

    console.log("üöÄ Sending to GPT with adapted prompt...")

    const gptResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: `Eres un experto en recomendaciones de lugares que entiende perfectamente la cultura y jerga mexicana.
                     
            Para ciudades mexicanas: Recomienda lugares espec√≠ficos solo si los conoces bien.
            Para ciudades internacionales: Enf√≥cate en TIPOS de lugares que encajen con la vibe mexicana, pero s√© honesto sobre limitaciones de conocimiento espec√≠fico.
                        
            SIEMPRE responde con JSON v√°lido. Si no puedes recomendar lugares espec√≠ficos, devuelve array vac√≠o: []`,
          },
          { role: "user", content: searchPrompt },
        ],
        temperature: 0.2, // M√°s conservador
        max_tokens: 1000,
      }),
    })

    if (!gptResponse.ok) {
      console.error("‚ùå GPT API error:", gptResponse.status)
      return NextResponse.json([])
    }

    const data = await gptResponse.json()
    const content = data.choices[0]?.message?.content

    console.log("üì• GPT response received:", {
      hasContent: !!content,
      contentLength: content?.length || 0,
    })

    if (!content) {
      return NextResponse.json([])
    }

    let placesData: any[] = []
    try {
      // Limpiar y parsear respuesta
      const cleanContent = content.trim()
      placesData = JSON.parse(cleanContent)

      if (!Array.isArray(placesData)) {
        console.log("‚ö†Ô∏è Response is not an array, returning empty")
        return NextResponse.json([])
      }

      console.log("‚úÖ Successfully parsed:", placesData.length, "places")
    } catch (parseError) {
      console.error("‚ùå Error parsing GPT response:", parseError)
      console.log("üìÑ Raw content:", content.substring(0, 300))
      return NextResponse.json([])
    }

    // Formatear resultados
    const formattedPlaces: Place[] = placesData
      .slice(0, 3)
      .filter((place) => place && typeof place === "object" && place.name)
      .map((place, index) => ({
        id: 6000 + index,
        name: place.name?.trim() || `Lugar en ${city}`,
        category: mapCategory(place.category) || "Restaurante",
        address: place.address?.trim() || `${city}`,
        city: city,
        description_short:
          place.description_short?.trim().substring(0, 150) || `Un lugar perfecto para ${vibe.toLowerCase()}.`,
        playlists: [vibe],
        source: "gpt" as const,
        phone: place.phone || "No disponible",
        hours: place.hours || createDefaultHours(),
      }))

    console.log("üéØ Returning formatted places:", {
      count: formattedPlaces.length,
      city: city,
      vibe: vibe,
    })

    return NextResponse.json(formattedPlaces)
  } catch (error) {
    console.error("üí• Error in GPT expanded search:", error)
    return NextResponse.json([])
  }
}

async function checkIfMexicanCity(city: string): Promise<boolean> {
  // Lista extendida de ciudades/t√©rminos mexicanos
  const mexicanCities = [
    // Principales
    "cdmx",
    "ciudad de m√©xico",
    "df",
    "guadalajara",
    "gdl",
    "monterrey",
    "mty",
    // Medianas
    "puebla",
    "tijuana",
    "le√≥n",
    "ju√°rez",
    "ciudad ju√°rez",
    "torre√≥n",
    "quer√©taro",
    "culiac√°n",
    "mexicali",
    "aguascalientes",
    "m√©rida",
    "saltillo",
    "hermosillo",
    // Tur√≠sticas
    "canc√∫n",
    "puerto vallarta",
    "playa del carmen",
    "cozumel",
    "acapulco",
    "mazatl√°n",
    "los cabos",
    "oaxaca",
    "san miguel de allende",
    "tulum",
    // Fronterizas
    "nuevo laredo",
    "reynosa",
    "matamoros",
    "nogales",
    "ensenada",
    // Otras
    "toluca",
    "morelia",
    "xalapa",
    "veracruz",
    "campeche",
    "chetumal",
    "tuxtla",
  ]

  const cityLower = city.toLowerCase().trim()
  return mexicanCities.some((mexicanCity) => cityLower.includes(mexicanCity) || mexicanCity.includes(cityLower))
}

function buildMexicanCityPrompt(city: string, vibe: string, vibeProfile: any): string {
  return `Eres un experto local en ${city}, M√©xico. Busca lugares que REALMENTE encajen con este vibe espec√≠fico:

VIBE: ${vibe}
CONTEXTO: ${vibeProfile.context}
DESCRIPCI√ìN: ${vibeProfile.description}
EVITAR ABSOLUTAMENTE: ${vibeProfile.avoid}
EJEMPLOS CORRECTOS: ${vibeProfile.examples}

INSTRUCCIONES ESPEC√çFICAS PARA "${vibe}":
${
  vibe === "Crudo"
    ? `
- PROHIBIDO recomendar: Panader√≠a Rosetta, caf√©s trendy, lugares caros
- SOLO lugares casuales: taquer√≠as, fondas, comedores populares
- Precios accesibles, ambiente sin pretensiones
- Lugares donde puedas llegar "hecho pedazos" sin problemas
`
    : vibe === "Barb√≥n"
      ? `
- SOLO lugares caros, exclusivos, sofisticados
- Ambiente premium, servicio de primera
- Para impresionar, no para uso cotidiano
`
      : vibe === "Instagrameable"
        ? `
- SOLO lugares trendy, modernos, fotog√©nicos
- Con dise√±o llamativo, populares en redes sociales
- Aesthetic importante, viral-worthy
`
        : `
- Enf√≥cate en ${vibeProfile.context}
- Evita ${vibeProfile.avoid}
`
}

Encuentra m√°ximo 3 lugares REALES en ${city} que est√©n operando en 2024 y que coincidan EXACTAMENTE con el contexto del vibe.

IMPORTANTE: Si es ${vibe}, NO incluyas Panader√≠a Rosetta ni lugares similares.

Formato JSON requerido:
[
  {
    "name": "Nombre exacto del lugar",
    "category": "Restaurante|Caf√©|Bar y Cantina|Boutique|Espacio Cultural|Sal√≥n de Belleza|Librer√≠a con Encanto",
    "address": "Direcci√≥n completa con colonia",
    "description_short": "Por qu√© encaja ESPEC√çFICAMENTE con ${vibe} - m√°ximo 100 caracteres"
  }
]`
}

function buildInternationalCityPrompt(city: string, vibe: string, vibeDescription: string): string {
  return `La b√∫squeda es para "${vibe}" en ${city}. Esta es una vibe mexicana que significa: "${vibeDescription}".

CONTEXTO CULTURAL:
- El usuario busca lugares que encajen con la mentalidad/cultura mexicana de "${vibe}"
- Necesitas recomendar TIPOS de lugares que un mexicano buscar√≠a para esta vibe

INSTRUCCIONES:
- Si conoces lugares espec√≠ficos en ${city} que encajen, menci√≥nalos
- Si NO conoces lugares espec√≠ficos, responde con array vac√≠o: []
- NO inventes lugares o nombres espec√≠ficos
- Enf√≥cate en la experiencia/ambiente que busca un mexicano

SOLO si conoces lugares espec√≠ficos, usa este formato JSON:
[
  {
    "name": "Nombre exacto verificable",
    "category": "Restaurante|Caf√©|Bar y Cantina|Boutique|Espacio Cultural",
    "address": "Direcci√≥n en ${city}",
    "description_short": "Por qu√© un mexicano lo disfrutar√≠a para ${vibe}"
  }
]

Si tienes dudas sobre lugares espec√≠ficos, responde: []`
}

function getFallbackResults(city: string, vibe: string): Place[] {
  // Fallback results cuando no se encuentra el vibe
  return []
}

function createDefaultHours() {
  return {
    monday: "No disponible",
    tuesday: "No disponible",
    wednesday: "No disponible",
    thursday: "No disponible",
    friday: "No disponible",
    saturday: "No disponible",
    sunday: "No disponible",
  }
}

function mapCategory(category: string): Place["category"] {
  if (!category || typeof category !== "string") {
    return "Restaurante"
  }

  const categoryMap: Record<string, Place["category"]> = {
    restaurante: "Restaurante",
    restaurant: "Restaurante",
    caf√©: "Caf√©",
    cafe: "Caf√©",
    bar: "Bar y Cantina",
    cantina: "Bar y Cantina",
    boutique: "Boutique",
    tienda: "Boutique",
    galer√≠a: "Espacio Cultural",
    museo: "Espacio Cultural",
    "espacio cultural": "Espacio Cultural",
    librer√≠a: "Librer√≠a con Encanto",
    sal√≥n: "Sal√≥n de Belleza",
  }

  const normalized = category.toLowerCase().trim()

  for (const [key, value] of Object.entries(categoryMap)) {
    if (normalized.includes(key)) {
      return value
    }
  }

  return "Restaurante"
}
